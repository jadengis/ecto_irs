defmodule EctoIRS.Schema do
  @moduledoc """
  `Ecto.Schema` extensions for auditing capabilities.
  """

  @opts_schema [
    inserted_by: [
      type: {:or, [:atom, {:in, [false]}]},
      default: :inserted_by,
      doc: "the Ecto schema name of the field for insertion times or `false`"
    ],
    updated_by: [
      type: {:or, [:atom, {:in, [false]}]},
      default: :updated_by,
      doc: "the Ecto schema name of the field for update times or `false`"
    ],
    references: [
      type: :atom,
      doc: "the field on `type` the audits reference"
    ],
    autogenerate: [
      type: {:tuple, [:atom, :atom, {:list, :any}]},
      doc: "an MFA tuple used for generating both `inserted_by_id` and `updated_by_id`"
    ]
  ]

  @doc false
  defmacro __using__(_) do
    quote do
      import EctoIRS.Schema

      @audits_opts []
    end
  end

  @doc """
  Generates `:inserted_by` and `:updated_by` audit fields.

  The fields generated by this macro will automatically be set to
  the subject from the current context.

  ## Options

  #{NimbleOptions.docs(@opts_schema)}

  All options can be pre-configured by setting `@audits_opts`.
  """
  defmacro audits(type, opts \\ []) do
    opts_schema = @opts_schema
    quote bind_quoted: binding() do
      merged_opts = Keyword.merge(@audits_opts, opts)
      audits = NimbleOptions.validate!(merged_opts, opts_schema)

      autogen = audits[:autogenerate]

      inserted_by = audits[:inserted_by]
      updated_by = audits[:updated_by]
      opts = if references = audits[:references], do: [references: references], else: []

      if inserted_by do
        Ecto.Schema.belongs_to(inserted_by, type, opts)
      end

      if updated_by do
        Ecto.Schema.belongs_to(updated_by, type, opts)

        with {m, f, a} when is_atom(m) and is_atom(f) and is_list(a) <- autogen do
          Module.put_attribute(__MODULE__, :ecto_autoupdate, {[:"#{updated_by}_id"], autogen})
        end
      end

      with {m, f, a} when is_atom(m) and is_atom(f) and is_list(a) <- autogen,
           [_ | _] = fields <- Enum.filter([inserted_by, updated_by], & &1) do
        Module.put_attribute(
          __MODULE__,
          :ecto_autogenerate,
          {Enum.map(fields, &:"#{&1}_id"), autogen}
        )
      end

      :ok
    end
  end
end
